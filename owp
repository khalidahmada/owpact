#!/usr/bin/php
<?php


    use pleaseHandler\AjaxHandler;
    use pleaseHandler\EmailHandler;
    use pleaseHandler\ExtraHandler;
    use pleaseHandler\FunctionsHandler;
    use pleaseHandler\HelperHandler;
    use pleaseHandler\HookHandler;
    use pleaseHandler\ModuleHandler;
    use pleaseHandler\RepoHandler;
    use pleaseHandler\RouteHandler;
    use pleaseHandler\TableViewHandler;
    use pleaseHandler\TraitHandler;

    class OWPactPlease{

        /**
         * OWPactPlease constructor.
         */

        private $handlersReferences;
        private $handlers;
        public function __construct()
        {
            $this->handlers = array();
            $this->handlersReferences = array();
            $this->boot();
        }

        private function boot()
        {

            $this->RegisterModules();
            $this->RegisterHandler();

            $this->RenderDoc();

            $this->HandlerCLI();

        }

        private function RegisterModules()
        {
            $this->RegisterModule('base');
            $this->RegisterModule('pleaseHandler/CreateElement');
            $this->RegisterModule('pleaseHandler/HandlerTrait');
        }

        private function RegisterHandler()
        {

            $this->RegisterModule('pleaseHandler/PublishHandler','PublishHandler');

            $this->RegisterModule('pleaseHandler/HandlerPlease');

            $this->RegisterModule('pleaseHandler/AjaxHandler');
            $this->RegisterModule('pleaseHandler/EmailHandler');
            $this->RegisterModule('pleaseHandler/HookHandler');
            $this->RegisterModule('pleaseHandler/RepoHandler');
            $this->RegisterModule('pleaseHandler/HelperHandler');
            $this->RegisterModule('pleaseHandler/ExtraHandler');
            $this->RegisterModule('pleaseHandler/RouteHandler');
            $this->RegisterModule('pleaseHandler/TraitHandler');
            $this->RegisterModule('pleaseHandler/TableViewHandler');
            $this->RegisterModule('pleaseHandler/ModuleHandler');
            $this->RegisterModule('pleaseHandler/FunctionsHandler');

        }

        private function RegisterModule($module,$classReference=false)
        {
            require_once $module.'.php';
            if($classReference){
                $this->handlers[] = $classReference;
            }
        }

        private function HandlerCLI()
        {

            global $argv;

            if($argv){
                $current_cmd = $argv[1];

                if($current_cmd == 'make'){

                    $error_not_valide_make = Console::white("Please enter valid entry:\n", 'white', true, 'red').

                                             ":(ajax , hook , helper repo ,email, module, extra, tableview )";

                    $this->CheckIfAlreadyPublished();
                    if(isset($argv[2])){
                                $this->ProcessHandler($argv);
                                echo $error_not_valide_make;
                    }else{
                        echo $error_not_valide_make;
                    }
                }else{

                    // Check if is Publish Case
                    if($current_cmd == 'publish'){

                        $publish = new PublishHandler();
                        $publish->Publish();

                    }else{
                        echo ">>>>> please Enter valid command";
                        $this->PrintDoc();
                    }
                }

            }else{
                echo "Please enter valid command";
            }
        }


        /*
         * Process Handlers
         */
        private function ProcessHandler($argv)
        {

            new AjaxHandler($argv);
            new RepoHandler($argv);
            new EmailHandler($argv);
            new HelperHandler($argv);
            new HookHandler($argv);
            new ExtraHandler($argv);
            new RouteHandler($argv);
            new TraitHandler($argv);
            new TableViewHandler($argv);
            new ModuleHandler($argv);
            new FunctionsHandler($argv);


        }

        private function CheckIfAlreadyPublished()
        {
            $Registray_file = OWPactConfig::getOWPDir().'/RegisteryOwpact.php';

            if(!file_exists($Registray_file)){
                echo "Can't find the RegisteryOwpact.php in your project.".
                    "Do you published ? else please publish first 'php owp publish'";
                die();
            }
        }

        /*
         * Generate Docs for Help
         */
        private function RenderDoc()
        {
            $this->handlers = array(

                AjaxHandler::getDoc(),
                RepoHandler::getDoc(),
                EmailHandler::getDoc(),
                HelperHandler::getDoc(),
                HookHandler::getDoc(),
                ExtraHandler::getDoc(),
                RouteHandler::getDoc(),
                TraitHandler::getDoc(),
                TableViewHandler::getDoc(),
                ModuleHandler::getDoc(),
                FunctionsHandler::getDoc(),
            );
        }


        private  function PrintDoc()
        {
            if($this->handlers){
                echo "\n";
                echo Console::log('=================== OWPACT HELP ===============','green',false);
                echo "\n";
                foreach($this->handlers as $handler){
                    echo "\n";
                    echo Console::log($handler['trigger'],'cyan',false);
                    echo Console::log(" ||  ",'bold',false);
                    echo Console::log($handler['demo'].' : ','green',false);
                    Console::log($handler['doc'],'white',false,'brown');
                    echo "\n";
                }
                echo "\n";
                echo Console::log('=================== OWPACT HELP ===============','green',false);
            }
        }


    }

    new OWPactPlease();