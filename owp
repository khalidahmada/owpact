#!/usr/bin/php
<?php


    use pleaseHandler\AjaxHandler;
    use pleaseHandler\EmailHandler;
    use pleaseHandler\ExtraHandler;
    use pleaseHandler\FunctionsHandler;
    use pleaseHandler\HelperHandler;
    use pleaseHandler\HookHandler;
    use pleaseHandler\ModuleHandler;
    use pleaseHandler\PageHandler;
    use pleaseHandler\PublishHandler;
    use pleaseHandler\QueueHandler;
    use pleaseHandler\RepoHandler;
    use pleaseHandler\RouteHandler;
    use pleaseHandler\SwitchProjectHandler;
    use pleaseHandler\TableViewHandler;
    use pleaseHandler\TraitHandler;


    class OWPactPlease
    {

        /**
         * OWPactPlease constructor.
         */

        private $handlersReferences;
        private $handlers;
        private $triggers;

        public function __construct()
        {
            $this->handlers=array();
            $this->triggers=array();
            $this->handlersReferences=array();
            $this->boot();
        }

        private function boot()
        {

            $this->RegisterModules();
            $this->RegisterHandler();
            $this->RenderDoc();
            $this->HandlerCLI();

        }

        private function RegisterModules()
        {
            $this->RegisterModule('base');
            $this->RegisterModule('pleaseHandler/CreateElement');
            $this->RegisterModule('pleaseHandler/HandlerTrait');
            $this->RegisterModule('pleaseHandler/Handleable');
        }

        private function RegisterHandler()
        {

            $this->RegisterModule('pleaseHandler/PublishHandler', 'PublishHandler');

            $this->RegisterModule('pleaseHandler/HandlerPlease');

            $this->RegisterModule('pleaseHandler/AjaxHandler');
            $this->RegisterModule('pleaseHandler/EmailHandler');
            $this->RegisterModule('pleaseHandler/HookHandler');
            $this->RegisterModule('pleaseHandler/RepoHandler');
            $this->RegisterModule('pleaseHandler/HelperHandler');
            $this->RegisterModule('pleaseHandler/ExtraHandler');
            $this->RegisterModule('pleaseHandler/RouteHandler');
            $this->RegisterModule('pleaseHandler/TraitHandler');
            $this->RegisterModule('pleaseHandler/TableViewHandler');
            $this->RegisterModule('pleaseHandler/ModuleHandler');
            $this->RegisterModule('pleaseHandler/FunctionsHandler');
            $this->RegisterModule('pleaseHandler/QueueHandler');
            $this->RegisterModule('pleaseHandler/PageHandler');
            $this->RegisterModule('pleaseHandler/Extras/SwitchProjectHandler');

        }

        private function RegisterModule($module, $classReference=false)
        {
            require_once $module . '.php';
            if ($classReference) {
                $this->handlers[]=$classReference;
            }
        }

        private function HandlerCLI()
        {

            global $argv;

            if (isset($argv) &&isset($argv[1])) {

                $current_cmd=$argv[1];

                // Check if is Publish Case
                if ($current_cmd == 'publish') {

                    $publish=new PublishHandler();
                    $publish->Publish();

                } else {

                    $this->CheckIfAlreadyPublished();

                    if (isset($argv[2])) {
                        $this->ProcessHandler($argv);
                        $this->PrintAvailableTriggers();
                    } else {
                        $this->PrintAvailableTriggers();
                    }


                    if (!in_array($current_cmd, array('help', '-h', 'H'))) {
                        Console::log("Please enter valid command", 'red', true);
                    }
                    $this->PrintDoc();
                }


            } else {
                Console::log("Please enter valid command", 'red', true);
                $this->PrintDoc();
            }
        }


        /*
         * Process Handlers
         */
        private function ProcessHandler($argv)
        {

            new AjaxHandler($argv);
            new RepoHandler($argv);
            new EmailHandler($argv);
            new HelperHandler($argv);
            new HookHandler($argv);
            new ExtraHandler($argv);
            new RouteHandler($argv);
            new TraitHandler($argv);
            new TableViewHandler($argv);
            new ModuleHandler($argv);
            new FunctionsHandler($argv);
            new QueueHandler($argv);
            new PageHandler($argv);
            new SwitchProjectHandler($argv);


        }

        private function CheckIfAlreadyPublished()
        {
            $Registray_file=OWPactConfig::getOWPDir() . '/RegisteryOwpact.php';

            if (!file_exists($Registray_file)) {
                Console::log("Can't find the ","red",false);
                echo Console::green("RegisteryOwpact.php","white",false,'black');
                Console::log(" in your project ","red",false,'white');
                Console::log("please publish first: ",'red',false);
                Console::log("php owp publish ",'green',false,'white');
                Console::log("Or verify your config/project.json paths ",'red');
                Console::log('You are current on path '.
                    OWPactConfig::getCurrentDist(),'red'
                );

                Console::log(' check alose current_dist now is '.
                    OWPactConfig::getCurrentDistVal(),'red'
                );
                die();
            }
        }

        /*
         * Generate Docs for Help
         */
        private function RenderDoc()
        {
            $this->handlers=array(

                AjaxHandler::getDoc(),
                RepoHandler::getDoc(),
                EmailHandler::getDoc(),
                HelperHandler::getDoc(),
                HookHandler::getDoc(),
                ExtraHandler::getDoc(),
                RouteHandler::getDoc(),
                TraitHandler::getDoc(),
                TableViewHandler::getDoc(),
                ModuleHandler::getDoc(),
                FunctionsHandler::getDoc(),
                QueueHandler::getDoc(),
                PageHandler::getDoc(),
                SwitchProjectHandler::getDoc(),
            );

        }


        private function PrintDoc()
        {
            if ($this->handlers) {
                echo "\n";
                Console::log('=================== OWPACT HELP ===============', 'green', false);
                echo "\n";
                foreach ($this->handlers as $handler) {
                    echo "\n";
                    Console::log($handler['trigger'], 'cyan', false);
                    Console::log(" ||  ", 'bold', false);
                    Console::log($handler['demo'] . ' : ', 'green', false);
                    Console::log($handler['doc'], 'white', false, 'brown');
                    echo "\n";
                }
                echo "\n";
                Console::log('=================== OWPACT HELP ===============', 'green', false);
            }
        }

        private function PrintAvailableTriggers()
        {

            Console::log("Please enter a valid entry or type php owp help for help:", 'red', true);

            foreach ($this->handlers as $handler) {
                Console::log($handler['trigger'] . ' : ', 'green', false);
                Console::log($handler['demo'], 'white', true);
            }

        }


    }

    new OWPactPlease();